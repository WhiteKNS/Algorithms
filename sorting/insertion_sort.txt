https://www.youtube.com/watch?v=dAAkElskMmU


typedef unsigned int u32;

void insertion_sort(int arr[], u32 size)
{
	for (u32 i = 0; i < size; ++i) {
		if (i == 0) continue;

		for (u32 j = i; j >= 0 && arr[j] < arr[j - 1]; --j) {
			int temp = arr[j - 1];
			arr[j - 1] = arr[j];
			arr[j] = temp;
		}
	}
}

int main()
{
	u32 array_size	= 7;
	int *sorting_array = new int[array_size] { 2, 3, 1, 5, 0, 4, 6};
	insertion_sort(sorting_array, array_size);

	for (u32 i = 0; i < array_size; ++i)
		std::cout << sorting_array[i];

	delete[] sorting_array;
    return 0;
}

посмотри видео!

берем последний элемент, сравниваем с предыдущим. Если он меньше, то меняем местами с предыдущим, потом еще и еще и еще.
1. сравнить 1й и 2й элементы, если 2й элемент меньше(<), 1го - меняем местами.
2. берем 3 элемент - если 3й элемент меньше (<) 2го - меняем местами - если 2й элемент меньше(<) первого - меняем местами. и тд

можно решить так, можно(но не нужно :) ) рекурсивно(внутренний цикл)

сложность алгоритма:

O (n^2) - худший случай, (в худшем случае придется пробегать по 2м циклам, длина которых - длина массива).
O(n) - лучший случай (в лучшем случае пройдемся 1 раз по циклу, и внутренний не выполнится ни разу)


