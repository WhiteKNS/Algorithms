#include "stdafx.h"
#include <iostream>

typedef unsigned int u32;

template<class T>
void swap(T arr[], const u32 first_el, const u32 second_el)
{
	T temp = arr[first_el];
	arr[first_el] = arr[second_el];
	arr[second_el] = temp;
}

template <typename T>
void merge(T arr[], int left, int middle, int right)
{
	const int size_1 = middle - left + 1;
	const int size_2 = right - middle;

	T *arr_1 =  new T[size_1];
	T *arr_2 = new T[size_2];

	int i = 0, j = 0, k = left;

	for (int i = 0; i < size_1; ++i)
		arr_1[i] = arr[k++];

	for (int i = 0; i < size_2; ++i)
		arr_2[i] = arr[k++];

	k = left;
	while (i < size_1 && j < size_2) {
		if (arr_1[i] < arr_2[j])
			arr[k++] = arr_1[i++];
		else
			arr[k++] = arr_2[j++];
	}

	while (i < size_1) arr[k++] = arr_1[i++];
	while (j < size_2) arr[k++] = arr_2[j++];

	delete[] arr_1;
	delete[] arr_2;
}

template <typename T>
void merge_sort(T arr[], const int low, const int high)
{
	if (high > low) {
		int middle = (high - low) / 2 + low;
		merge_sort(arr, low, middle);
		merge_sort(arr, middle + 1, high);
		merge(arr, low, middle, high);
	}
}

int main()
{
	const u32 array_size = 7;
	int *sorting_array = new int[array_size] { 7, 6, 5, 4, 8, 9, 0};
	merge_sort(sorting_array, 0, array_size - 1);

	for (u32 i = 0; i < array_size; ++i)
		std::cout << sorting_array[i];

	delete[] sorting_array;

	system("pause");
	return 0;
}


посмотри видео!
https://www.youtube.com/watch?v=Pr2Jf83_kG0


ищем середину! это просто индекс! физически ничего не делим! делим все до получения атомарных значений(1)

в мердже создаем 2 массива.
а потом значения этих массивов переписываем в главный массив.
{ 1 3 5 6 } { 0 4 8 9} - выбираем 1й элемент, сравниваем. если элемент меньше, помещаем его в массив.
{ 0 1 3 4 5 6 8 9}

худший случай - nlogn
лучший случай - nlogn
