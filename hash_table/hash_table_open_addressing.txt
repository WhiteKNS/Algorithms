// hash_table_open_addressing.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <iostream>

typedef unsigned int u32;

template <typename T>
struct hash_node {
	int key;
	T value;
};

template <typename T>
class hash_table {
	hash_node <T> **arr;

	u32 capacity;
	u32 size;

public:
	hash_table () : capacity(100), size(0) {
		arr = new hash_node<T>*[capacity];

		for (u32 i = 0; i < capacity; ++i) {
			arr[i] = nullptr;
		}
	}

	~hash_table() {
		for (u32 i = 0; i < capacity; ++i) {
			delete arr[i];
		}

		delete arr;
	}

	int key (const T &v) {
		return (int)v % capacity;
	}

	void insert_value(const T &v) {
		int k = key(v);

		while(arr[k] && (arr[k]->key == k || arr[k]->key == -1)) {
			++k;
			k %= capacity;
		}

		arr[k] = new hash_node<T> {k, v};
		
		++size;
	}

	T delete_value(const T &v) {
		int k = key(v);

		while(arr[k]) {
			if (arr[k]->key == k) {
				
				T cashe_v = arr[k]->value;

				arr[k]->key = -1;
				arr[k]->value = NULL;

				--size;
				return cashe_v;
			}

			++k;
			k %= capacity;
		}

		return NULL;
	}

	void print_table() {
		for (u32 i = 0; i < capacity; ++i) {
			if (arr[i] && arr[i]->key != - 1)
				std::cout << arr[i]->value << " ";
		}

		std::cout << std::endl;
	}
};


int main()
{
	hash_table <int> *table = new hash_table<int>();
	table->insert_value(1);
	table->insert_value(1);
	table->insert_value(2);

	table->print_table();

	table->delete_value(1);
	table->print_table();

	delete table;

	system("pause");
    return 0;
}

