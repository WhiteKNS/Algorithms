 hash_table.cpp  Defines the entry point for the console application.


#include stdafx.h
#include iostream

typedef unsigned int u32;

templatetypename V
struct node {
	V value;
	node next;
};

templatetypename V
class hash_table {
#define MAX_SIZE 100
	nodeV table[MAX_SIZE];
	u32 size;

public
	hash_table(const u32 s)  size(s) {
		for (u32 i = 0; i  size; ++i)
			table[i] = nullptr;
	}

	~hash_table() {
		for (u32 i = 0; i  size; ++i) {
			nodeV cur = table[i];

			while(cur) {
				nodeV cashe = cur-next;

				delete cur;
				cur = cashe;
			}
		}
	}

	void insert_value(const V &v) {
		int k = key(v);
		if(k == u32(-1))
			return;

		if (!table[k]) {
			table[k] = new nodeV{v, nullptr};
		} else {
			node V cur = table[k];

			while(cur-next)
				cur = cur-next;

			nodeV new_node = new nodeV {v, nullptr};
			cur-next = new_node;
		}
	}

	void delete_item(const V &v) {
		int k = key(v);

		if (k == u32(-1))
			return;

		nodeV cur = table[k];

		if (!cur) return;

		nodeV prev = nullptr;

		while(cur) {
			nodeV cashe = cur-next;

	
			if (cur-value == v) {
				delete cur;
				if (prev)
					prev-next = cashe;

				cur = cashe;
				break;
			}

			prev = cur;
			cur = cashe;
		}

		table[k] = cur;
	}

	void print_table() {
		stdcout  printing...  stdendl;

		for (u32 i = 0; i  size; ++i) {
			if (!table[i]) continue;

			nodeV cur = table[i];

			while(cur-next) {
				stdcout  cur-value   ;
				cur = cur-next;
			}
			
			stdcout  cur-value  stdendl;
		}
	}

private
	int key(const V &value) {
		u32 v = (u32)value;
		int k = v%size;
		return k = MAX_SIZE  u32(-1)  k;
	}
};

int main()
{
	hash_tableint hash = new hash_tableint(10);

	hash-insert_value(3);
	hash-insert_value(5);
	hash-insert_value(550);
	hash-insert_value(13);

	hash-print_table();

	hash-delete_item(5);

	hash-print_table();

	hash-insert_value(5);
	hash-print_table();

	delete hash;

	system(pause);
    return 0;
}

