		fibonacci number
		
		normal common algo
		1.
		int fib(int n) {
			if (n <= 0) return 0;
			else if (n == 1) return 1;
			return fib (n - 1) + fib(n - 2);
		}
		
		time complexity O(2^n)
		
		
		2.
		void allFib(int n) {
			for (int i = 0; i < n; ++i)
				std::cout<<i<<":"<<fib(i)<<std::endl;
		}
		
		
		int fib(int n) {
			if (n <= 0) return 0;
			else if (n == 1) return 1;
			
			return fib(n - 1) + fib(n - 2);
		}
		
		time complexity - O(2^n) time, because n is changing!
		
		
		
		3. this technique, called momorization, is very common one to optimize exponential time recursive algorithms.
		void allFib(int n) {
			int[] memo = new int[n + 1];
			for (int i = 0; i < n; ++i)
				std::cout<<i<<":"<<fib(i, memo)<<std::endl;
		}
		
		int fib(int n, int[] memo) {
			if (n <= 0) return 0;
			else if (n == 1) return 1;
			else if (memo[n] > 0) return memo[n];
			
			memo[n] = fib(n - 1, memo) + fib(n - 2, memo);
			return memo[n];
		}
		
		
		time complexity O(n) time;
		at each call to fib(i), we have already computed and stored the values for fib(n - 1) and fib(n - 2).
		We just look up those values, sum them, store the new result and return. This takes constant amount of time.
		